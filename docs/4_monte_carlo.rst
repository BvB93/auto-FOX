.. _Monte Carlo:

The general idea of the MonteCarlo class, and its subclasses, is to fit a
classical potential energy surface (PES) to an *ab-initio* PES by optimizing
the classical forcefield parameters.
This forcefield optimization is conducted using the Addaptive Rate Monte
Carlo (ARMC, 1_) method described by S. Cosseddu *et al* in
*J. Chem. Theory Comput.*, **2017**, *13*, 297â€“308.

The implemented algorithm can be summarized as following:

1.  A trial state, :math:`S_{l}`, is generated by moving a random parameter
    retrieved from a user-specified parameter set.
2.  It is checked whether or not the trial state was previously visited.

    * If ``True``, retrieve the previously calculated PES.
    * If ``False``, calculate a new PES with the generated parameters.

.. math::
    :label: eq:pfx1

    p(k \leftarrow l) =
    \Biggl \lbrace
    {
        1, \quad \Delta \varepsilon_{QM-MM} ( S_{k} ) \; \lt \; \Delta \varepsilon_{QM-MM} ( S_{l} )
        \atop
        0, \quad \Delta \varepsilon_{QM-MM} ( S_{k} ) \; \gt \; \Delta \varepsilon_{QM-MM} ( S_{l} )
    }

3.  The move is accepted if the new set of parameters, :math:`S_{l}`, lowers
    the auxiliary error (:math:`\Delta \varepsilon_{QM-MM}`) with respect to
    the previous set of accepted parameters, :math:`S_{k}` (see :eq:`pfx1` & :eq:`pfx2`).

.. math::
    :label: eq:pfx2

    \Delta \varepsilon_{QM-MM} =
    \sum_{n} \sqrt{
        \sum_{r_{ij}=0}^{r_{max}} (\Delta g_{n} (r_{ij}))^2
    }

4.  The parameter history is updated.
    Based on whether or not the new parameter set is accepted the
    auxiliary error of either :math:`S_{l}` or :math:`S_{k}` is increased
    by the variable :math:`\phi` (see eq 3). In this way, the underlying PES is
    continuously modified, preventing the optimizer from getting stuck in a
    (local) minima in the parameter space.

.. math::
    :label: eq:pfx3

    \Delta \varepsilon_{QM-MM} ( S_{x} ) + \phi =
    \Biggl \lbrace
    {
        x = k, \quad \Delta \varepsilon_{QM-MM} ( S_{k} ) \; \lt \; \Delta \varepsilon_{QM-MM} ( S_{l} )
        \atop
        x = l, \quad \Delta \varepsilon_{QM-MM} ( S_{k} ) \; \gt \; \Delta \varepsilon_{QM-MM} ( S_{l} )
    }

5.  The parameter :math:`\phi` is updated at regular intervals
    in order to maintain a constant acceptance rate, :math:`\alpha_{t}`.
    This is illustrated in eq 4, where the total number of
    :math:`\kappa \omega` iterations is divided into :math:`\kappa`
    super- and :math:`\omega` sub-iterations.

.. math::
    :label: eq:pfx4

    \phi_{\kappa \omega} =
    \phi_{ ( \kappa - 1 ) \omega} * \gamma^{
        \text{sgn} ( \alpha_{t} - \overline{\alpha}_{ ( \kappa - 1 ) })
    }
    \quad
    \kappa = 1, 2, 3, ..., N





The MonteCarlo Class & Sub Classes
==================================

The API of the :class:`FOX.MonteCarlo` and the :class:`FOX.ARMC` subclass.

MonteCarlo API
--------------

.. autoclass:: FOX.classes.monte_carlo.MonteCarlo
    :members:

ARMC API
--------

.. autoclass:: FOX.classes.monte_carlo.ARMC
    :members:


.. _1: dx.doi.org/10.1021/acs.jctc.6b01089
